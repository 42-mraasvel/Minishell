BASIC EXAMPLE GRAMMAR TO PRACTICE:

support: no pipes or redirections, just single commands and arguments



<command>		::=	<word>
				|	<metacharacter>
				|	<word> <command>
				|	<metacharacter> <command>
<word>			::=	char
				|	char <word>

<char>			::=	!<blank> && !<metacharacter>
<blank>			::=	'\t'|' '
<metacharacter>	::=	::=	'|'
					|	'<'
					|	'>'
					|	';'
					|	<blank>
					|	'\n' (newline)
				NOT IN SUBJECT:
					|	'&'
					|	'('
					|	')'



<variable>			::=	'$' NAME
					|	'$' '{' NAME '}'
					|	'$' '?'
					|	'$' '{' parameter '}' (?)
					|	'$' '{' expression '}' (?)

Definitions:
WORD				::=	!<operator>
NAME				::=	<alphascore>
					|	<alphascore> <alphanumscores>


Terminals:

<digit>				::=	[0-9]
<alpha>				::=	[a-z] | [A-Z]
<alphanum>			::=	<alpha>
					|	<digit>
<alphascore>		::=	<alpha> | '_'
<alphanumscore>		::=	<alpha> | digit | '_'
<alphanumscores>	::=	<alphanumscore>
					|	<alphanumscore> <alphanumscores>

<whitespace>		::=	' ' | '\n' | '\t' | '\f' | '\r' | '\v'

<operator>			::=	'>' | '<' | ';' | ">>" | '|'









Shell grammar:


<command_list>		::= <command>
					|	<command> ';'
					|	<command> ';' <command_list>
<command>			::=	<simple_command>
					|	<piped_command>

<piped_command>		::=	<simple_command> '|' <simple_command>
					|	<simple_command> '|' <piped_command>
<simple_command>	::=	<command_element>
					|	<command_element> <simple_command>
<command_element>	::=	<word>
					|	<redirection>
					|	<env_assignment>


<env_assignment>	::=	<word> '=' <word> (? : restriction on assignment word)


<alpha>				::=	[a-z] | [A-Z]
<digit>				::=	[0-9]
<num>				::=	<digit>
					|	<digit> <num>
<alphanum>			::=	<alpha> | <digit>
<blank>				::=	<space> ' '
					|	<tab> '\t'

<name/identifier>	::=	<letter>
					|	<letter> <name_content>
<letter>			::=	<alpha>
					|	'_'
<letternum>			::=	<alpha>
					|	'_'
					|	<num>
<name_content>		::=	<letternum>
					|	<letternum> <name_content>

<control_operator>	::=	';'
					|	'|'
				BONUS: (with '(' ')' precedence)
					|	'||'
					|	'&&'
				NOT IN SUBJECT:
					|	'&'
					|	'('
					|	')'
					|	';;'
					|	';&'
					|	';;&'
					|	'|&'
					|	'\n' <newline>
<metacharacter>		::=	'|'
					|	'<'
					|	'>'
					|	';'
					|	<blank>
					|	'\n' <newline>
				NOT IN SUBJECT:
					|	'&'
					|	'('
					|	')'







Shell Definitions:

	These definitions are used throughout the remainder of this manual.

	blank
	A space or tab character.

	builtin
	A command that is implemented internally by the shell itself, rather than by an executable program somewhere in the file system.

	control operator
	A token that performs a control function. It is a newline or one of the following: ‘||’, ‘&&’, ‘&’, ‘;’, ‘;;’, ‘;&’, ‘;;&’, ‘|’, ‘|&’, ‘(’, or ‘)’.

	exit status
	The value returned by a command to its caller. The value is restricted to eight bits, so the maximum value is 255.

	field
	A unit of text that is the result of one of the shell expansions. After expansion, when executing a command, the resulting fields are used as the command name and arguments.

	filename
	A string of characters used to identify a file.

	job
	A set of processes comprising a pipeline, and any processes descended from it, that are all in the same process group.

	job control
	A mechanism by which users can selectively stop (suspend) and restart (resume) execution of processes.

	token
	A sequence of characters considered a single unit by the shell. It is either a word or an operator.



	metacharacter
	A character that, when unquoted, separates words. A metacharacter is a space, tab, newline, or one of the following characters: ‘|’, ‘&’, ‘;’, ‘(’, ‘)’, ‘<’, or ‘>’.

	operator
	A control operator or a redirection operator. See Redirections, for a list of redirection operators. Operators contain at least one unquoted metacharacter.

	name
	A word consisting solely of letters, numbers, and underscores, and beginning with a letter or underscore. Names are used as shell variable and function names. Also referred to as an identifier.

	word
	A sequence of characters treated as a unit by the shell. Words may not include unquoted metacharacters.


SHELL GRAMMAR:


/* -------------------------------------------------------
   The grammar symbols
   ------------------------------------------------------- */
%token  WORD
%token  ASSIGNMENT_WORD
%token  NAME
%token  NEWLINE
%token  IO_NUMBER


/* The following are the operators (see XBD Operator)
   containing more than one character. */



%token  AND_IF    OR_IF    DSEMI
/*      '&&'      '||'     ';;'    */


%token  DLESS  DGREAT  LESSAND  GREATAND  LESSGREAT  DLESSDASH
/*      '<<'   '>>'    '<&'     '>&'      '<>'       '<<-'   */


%token  CLOBBER
/*      '>|'   */


/* The following are the reserved words. */


%token  If    Then    Else    Elif    Fi    Do    Done
/*      'if'  'then'  'else'  'elif'  'fi'  'do'  'done'   */


%token  Case    Esac    While    Until    For
/*      'case'  'esac'  'while'  'until'  'for'   */


/* These are reserved words, not operator tokens, and are
   recognized when reserved words are recognized. */


%token  Lbrace    Rbrace    Bang
/*      '{'       '}'       '!'   */


%token  In
/*      'in'   */


/* -------------------------------------------------------
   The Grammar
   ------------------------------------------------------- */
%start program
%%
program          : linebreak complete_commands linebreak
				 | linebreak
				 ;
complete_commands: complete_commands newline_list complete_command
				 |                                complete_command
				 ;
complete_command : list separator_op
				 | list
				 ;
list             : list separator_op and_or
				 |                   and_or
				 ;
and_or           :                         pipeline
				 | and_or AND_IF linebreak pipeline
				 | and_or OR_IF  linebreak pipeline
				 ;
pipeline         :      pipe_sequence
				 | Bang pipe_sequence
				 ;
pipe_sequence    :                             command
				 | pipe_sequence '|' linebreak command
				 ;
command          : simple_command
				 | compound_command
				 | compound_command redirect_list
				 | function_definition
				 ;
compound_command : brace_group
				 | subshell
				 | for_clause
				 | case_clause
				 | if_clause
				 | while_clause
				 | until_clause
				 ;
subshell         : '(' compound_list ')'
				 ;
compound_list    : linebreak term
				 | linebreak term separator
				 ;
term             : term separator and_or
				 |                and_or
				 ;
for_clause       : For name                                      do_group
				 | For name                       sequential_sep do_group
				 | For name linebreak in          sequential_sep do_group
				 | For name linebreak in wordlist sequential_sep do_group
				 ;
name             : NAME                     /* Apply rule 5 */
				 ;
in               : In                       /* Apply rule 6 */
				 ;
wordlist         : wordlist WORD
				 |          WORD
				 ;
case_clause      : Case WORD linebreak in linebreak case_list    Esac
				 | Case WORD linebreak in linebreak case_list_ns Esac
				 | Case WORD linebreak in linebreak              Esac
				 ;
case_list_ns     : case_list case_item_ns
				 |           case_item_ns
				 ;
case_list        : case_list case_item
				 |           case_item
				 ;
case_item_ns     :     pattern ')' linebreak
				 |     pattern ')' compound_list
				 | '(' pattern ')' linebreak
				 | '(' pattern ')' compound_list
				 ;
case_item        :     pattern ')' linebreak     DSEMI linebreak
				 |     pattern ')' compound_list DSEMI linebreak
				 | '(' pattern ')' linebreak     DSEMI linebreak
				 | '(' pattern ')' compound_list DSEMI linebreak
				 ;
pattern          :             WORD         /* Apply rule 4 */
				 | pattern '|' WORD         /* Do not apply rule 4 */
				 ;
if_clause        : If compound_list Then compound_list else_part Fi
				 | If compound_list Then compound_list           Fi
				 ;
else_part        : Elif compound_list Then compound_list
				 | Elif compound_list Then compound_list else_part
				 | Else compound_list
				 ;
while_clause     : While compound_list do_group
				 ;
until_clause     : Until compound_list do_group
				 ;
function_definition : fname '(' ')' linebreak function_body
				 ;
function_body    : compound_command                /* Apply rule 9 */
				 | compound_command redirect_list  /* Apply rule 9 */
				 ;
fname            : NAME                            /* Apply rule 8 */
				 ;
brace_group      : Lbrace compound_list Rbrace
				 ;
do_group         : Do compound_list Done           /* Apply rule 6 */
				 ;
simple_command   : cmd_prefix cmd_word cmd_suffix
				 | cmd_prefix cmd_word
				 | cmd_prefix
				 | cmd_name cmd_suffix
				 | cmd_name
				 ;
cmd_name         : WORD                   /* Apply rule 7a */
				 ;
cmd_word         : WORD                   /* Apply rule 7b */
				 ;
cmd_prefix       :            io_redirect
				 | cmd_prefix io_redirect
				 |            ASSIGNMENT_WORD
				 | cmd_prefix ASSIGNMENT_WORD
				 ;
cmd_suffix       :            io_redirect
				 | cmd_suffix io_redirect
				 |            WORD
				 | cmd_suffix WORD
				 ;
redirect_list    :               io_redirect
				 | redirect_list io_redirect
				 ;
io_redirect      :           io_file
				 | IO_NUMBER io_file
				 |           io_here
				 | IO_NUMBER io_here
				 ;
io_file          : '<'       filename
				 | LESSAND   filename
				 | '>'       filename
				 | GREATAND  filename
				 | DGREAT    filename
				 | LESSGREAT filename
				 | CLOBBER   filename
				 ;
filename         : WORD                      /* Apply rule 2 */
				 ;
io_here          : DLESS     here_end
				 | DLESSDASH here_end
				 ;
here_end         : WORD                      /* Apply rule 3 */
				 ;
newline_list     :              NEWLINE
				 | newline_list NEWLINE
				 ;
linebreak        : newline_list
				 | /* empty */
				 ;
separator_op     : '&'
				 | ';'
				 ;
separator        : separator_op linebreak
				 | newline_list
				 ;
sequential_sep   : ';' linebreak
				 | newline_list
				 ;