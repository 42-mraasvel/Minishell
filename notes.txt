
Parsing:
	Abstract syntax tree
	Finite state machine

fork():		causes creation of a new process.  The new process (child process)
     is an exact copy of the calling process (parent process), some exceptions apply.

wait():		suspends execution of its calling process until
     stat_loc information is available for a terminated child process, or a
     signal is received.  On return from a successful wait() call, the
     stat_loc area contains termination information about the process that
     exited as defined below.
	
wait4():		provides a more general interface for programs that need
     to wait for certain child processes, that need resource utilization sta-
     tistics accumulated by child processes, or that require options.  The
     other wait functions are implemented using wait4().

wait3():		is the same as wait4() with a pid value of -1.

waitpid():	is identical to wait4() with an rusage value of zero.

signal():      Signals allow the manipulation of a process from outside its domain, as
     well as allowing the process to manipulate itself or copies of itself
     (children).  There are two general types of signals: those that cause
     termination of a process and those that do not.  Signals which cause ter-
     mination of a program might result from an irrecoverable error or might
     be the result of a user at a terminal typing the `interrupt' character.
     Signals are used when a process is stopped because it wishes to access
     its control terminal while in the background (see tty(4)).

kill():		sends the signal specified by sig to pid, a process
     or a group of processes.  Typically, Sig will be one of the signals spec-
     ified in sigaction(2).  A value of 0, however, will cause error checking
     to be performed (with no signal being sent).  This can be used to check
     the validity of pid.

getcwd():		copies the absolute pathname of the current working
     directory into the memory referenced by buf and returns a pointer to buf.
     The size argument is the size, in bytes, of the array referenced by buf.

chdir():		The path argument points to the pathname of a directory.  The chdir()
     function causes the named directory to become the current working direc-
     tory, that is, the starting point for path searches of pathnames not
     beginning with a slash, `/'.

stat():			obtains information about the file pointed to by
     path.  Read, write or execute permission of the named file is not
     required, but all directories listed in the path name leading to the file
     must be searchable.

lstat():		is like stat() except in the case where the named
     file is a symbolic link; lstat() returns information about the link,
     while stat() returns information about the file the link references.

fstat():		obtains the same information about an open file known by the
     file descriptor fildes.

execve():		transforms the calling process into a new process.  The new
     process is constructed from an ordinary file, whose name is pointed to by
     path, called the new process file.  This file is either an executable
     object file, or a file of data for an interpreter.

dup():			duplicates an existing object descriptor and returns its value to
     the calling process (fildes2 = dup(fildes)).

dup2():			the value of the new descriptor fildes2 is specified.  If
     fildes and fildes2 are equal, then dup2() just returns fildes2; no other
     changes are made to the existing descriptor.  Otherwise, if descriptor
     fildes2 is already in use, it is first deallocated as if a close(2) call
     had been done first.

extern char **environ:	The variable environ points to an array of pointers to strings
       called the "environment".  The last pointer in this array has the
       value NULL.